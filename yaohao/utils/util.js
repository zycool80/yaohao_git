'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.parseTime = parseTime;
exports.timeAgo = timeAgo;
exports._typeof = _typeof;
exports.encodeQuery = encodeQuery;
exports.logInfo = logInfo;

var _underscore = require('./../npm/underscore/underscore.js');

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var join = function join(array, separator) {
  var out = '';
  var total = array.length;
  if (total == 1) {
    out = array[0];
  } else {
    _underscore2.default.each(array, function (item, index) {
      if (index < total - 1) {
        out += item + separator;
      } else {
        out += item;
      }
    });
  }
  return out;
};

function parseTime(time, cFormat) {
  if (arguments.length === 0) {
    return null;
  }
  if ((time + '').length === 10) {
    time = +time * 1000;
  }
  var format = cFormat || '{y}-{m}-{d} {h}:{i}:{s}';
  var date = void 0;
  if ((typeof time === 'undefined' ? 'undefined' : _typeof2(time)) === 'object') {
    date = time;
  } else {
    date = new Date(parseInt(time));
  }
  var formatObj = {
    y: date.getFullYear(),
    m: date.getMonth() + 1,
    d: date.getDate(),
    h: date.getHours(),
    i: date.getMinutes(),
    s: date.getSeconds(),
    a: date.getDay()
  };
  return format.replace(/{(y|m|d|h|i|s|a)+}/g, function (result, key) {
    var value = formatObj[key];
    if (key === 'a') return ['一', '二', '三', '四', '五', '六', '日'][value - 1];
    if (result.length > 0 && value < 10) {
      value = '0' + value;
    }
    return value || 0;
  });
}

function getTodayStart() {
  var now = new Date();
  now.setHours(0);
  now.setMinutes(0);
  now.setSeconds(0);
  now.setMilliseconds(0);
  return Date.parse(now) / 1000;
}

function timeAgo(time) {
  var tmp = time.replace('T', ' ').replace(/-/g, '/');
  var data = new Date(tmp).getTime() / 1000;
  var between = Date.now() / 1000 - data;
  var todayStart = getTodayStart();

  if (data > todayStart) {
    if (between < 60) {
      return '刚刚';
    } else if (between < 3600) {
      return ~~(between / 60) + ' 分钟前';
    } else {
      return '今天 ' + parseTime(data, '{h}:{i}');
    }
  } else if (todayStart - data < 86400) {
    return '昨天 ' + parseTime(data, '{h}:{i}');
  } else {
    return parseTime(data, '{m}-{d} {h}:{i}');
  }
}

function _typeof(obj) {
  var class2type = {};
  "Boolean Number String Function Array Date RegExp Object Error".split(" ").forEach(function (e, i) {
    class2type["[object " + e + "]"] = e.toLowerCase();
  });
  if (obj == null) {
    return String(obj);
  }
  return (typeof obj === 'undefined' ? 'undefined' : _typeof2(obj)) === "object" || typeof obj === "function" ? class2type[class2type.toString.call(obj)] || "object" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
}

function encodeQuery(obj) {
  var out = [];
  _underscore2.default.each(obj, function (value, key) {
    out.push(key + '=' + value);
  });
  if (out.length) {
    return join(out, '&');
  }
  return '';
}

function logInfo(info, prefix) {
  prefix = prefix ? prefix : '';
  console.log(prefix + ' %c' + info + ' ', "color:red");
}
function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

module.exports = {
  join: join,
  _typeof: _typeof,
  encodeQuery: encodeQuery,
  logInfo: logInfo,
  timeAgo: timeAgo,
  guid: guid,
  parseTime: parseTime
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,